// Generated by CoffeeScript 1.12.4
var Type, childStyle, emptyFunction, innerHTML, sensorStyle, type;

emptyFunction = require("emptyFunction");

Type = require("Type");

type = Type("ResizeSensor");

type.defineGetters({
  width: function() {
    return this._width;
  },
  height: function() {
    return this._height;
  }
});

type.defineMethods({
  detach: function() {
    if (this._node) {
      this._callback = emptyFunction;
      this._node.removeChild(this._sensor);
      this._node = null;
    }
  }
});

type.defineValues(function(node, callback) {
  return {
    _node: node,
    _callback: callback || emptyFunction,
    _sensor: null,
    _width: null,
    _height: null,
    _updating: false
  };
});

type.initInstance(function() {
  return this._attach();
});

type.defineBoundMethods({
  _onScroll: function() {
    if (!this._updating) {
      this._updating = true;
      requestAnimationFrame(this._onResize);
    }
    this._reset();
  },
  _onResize: function() {
    var changed, height, node, width;
    this._updating = false;
    if (node = this._node) {
      width = node.offsetWidth;
      height = node.offsetHeight;
      if (width !== this._width) {
        this._width = width;
        changed = true;
      }
      if (height !== this._height) {
        this._height = height;
        changed = true;
      }
      if (changed) {
        this._callback(width, height, node);
      }
    }
  }
});

type.defineMethods({
  _attach: function() {
    var sensor;
    sensor = document.createElement("div");
    sensor.className = "resize-sensor";
    sensor.style.cssText = sensorStyle;
    sensor.innerHTML = innerHTML;
    this._sensor = sensor;
    this._node.appendChild(sensor);
    if ("static" === getComputedStyle(this._node, "position")) {
      this._node.style.position = "relative";
    }
    this._width = this._node.offsetWidth;
    this._height = this._node.offsetHeight;
    this._reset();
    sensor.childNodes[0].addEventListener("scroll", this._onScroll);
    sensor.childNodes[1].addEventListener("scroll", this._onScroll);
  },
  _reset: function() {
    var expand, shrink;
    expand = this._sensor.childNodes[0];
    shrink = this._sensor.childNodes[1];
    expand.firstChild.style.width = "100000px";
    expand.firstChild.style.height = "100000px";
    expand.scrollLeft = 100000;
    expand.scrollTop = 100000;
    shrink.scrollLeft = 100000;
    shrink.scrollTop = 100000;
  }
});

module.exports = type.build();

sensorStyle = "position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;";

childStyle = "position: absolute; left: 0; top: 0; transition: 0s;";

innerHTML = "<div class=\"resize-sensor-expand\" style=\"" + sensorStyle + "\"><div style=\"" + childStyle + "\"></div></div>\n<div class=\"resize-sensor-shrink\" style=\"" + sensorStyle + "\"><div style=\"" + childStyle + " width: 200%; height: 200%;\"></div></div>";
